#! /bin/bash

cmd=$0

exec 3>&1 >&2

krel=
while getopts 'k:' opt; do
    case "$opt" in
        k) krel=$OPTARG ;;
        :) echo "$OPTARG requires an argument" >&2; return 1;;
        ?) echo "unknown argument" >&2; return 1;;
    esac
done
shift $((OPTIND-1))

[ -r /etc/efi-measured-boot/config ] && . /etc/efi-measured-boot/config
if [[ $cmd = ./* ]]; then APPDIR=.; fi
. "${APPDIR:-.}"/functions
. "${APPDIR:-.}"/bash_functions

set -e

. "$(emboot_state_file)"

cleanup() {
    rc=$?
    [ -n "$tmpdir" ] && rm -rf "$tmpdir"
    [ "$rc" -eq 0 ] && exit 0
    echo "$(basename "$cmd") failed with exit code $rc" >&2
    exit $rc
}

trap cleanup EXIT

tmpdir=$(setup_tmp_dir)

read_counter >"$tmpdir"/counter

read_efi_vars

rootdev=( $(get_device_info /) )
cryptdev=( $(get_crypttab_entry "${rootdev[1]}") )

if [ -z "$krel" -o "$krel" = "$primary" ]; then
    echo "Sealing key to primary EFI loader ($primary)"
    seal_to_loader "$tmpdir" "${cryptdev[1]}" "$(emboot_loader_unix_path)" "$primary"
fi
if [ -z "$krel" -o "$krel" = "$old" ]; then
    echo "Sealing key to old EFI loader ($old)"
    seal_to_loader "$tmpdir" "${cryptdev[1]}" "$(emboot_loader_unix_path emboot_old.efi)" "$old"
fi

exit 0
