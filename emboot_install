#! /bin/bash

cmd=$0

exec 3>&1 >&2

krel=
while getopts 'k:' opt; do
    case "$opt" in
        k) krel=$OPTARG ;;
        :) echo "$OPTARG requires an argument"; exit 1;;
        ?) echo "unknown argument"; exit 1;;
    esac
done
shift $((OPTIND-1))

[ -r /etc/efi-measured-boot/config ] && . /etc/efi-measured-boot/config
if [[ $cmd = ./* ]]; then APPDIR=.; fi
. "${APPDIR:-.}"/functions
. "${APPDIR:-.}"/bash_functions

set -e

tmpdir=$(setup_tmp_dir)

cleanup() {
    [ -n "$tmpdir" ] && rm -rf "$tmpdir"
}

trap cleanup EXIT

rootdev=( $(get_device_info /) )
cryptdev=( $(get_crypttab_entry "${rootdev[1]}") )

cryptopts=${cryptdev[3]}
if [[ $cryptopts != *luks* ]]; then
    echo "crypttab entry missing luks option: $cryptopts"
    exit 1
fi
if [[ $cryptopts != *keyscript=*emboot_unseal.sh* ]]; then
    echo "keyscript option in crypttab entry missing or invalid: $cryptopts"
    exit 1
fi

echo "root=UUID=${rootdev[0]} cryptdevice=${cryptdev[1]}:${cryptdev[0]} $KERNEL_PARAMS" >"$tmpdir"/kernel-command-line.txt

kernels=( $(list_installed_kernels) )

statefile=$(emboot_state_file)

. "$statefile"

set +e

next_primary=$(kernel_path_to_release "${kernels[0]}")
next_old=$(kernel_path_to_release "${kernels[1]}")

if [ -n "$next_primary" ]; then
    if [ -z "$krel" -o "$next_primary" != "$primary" -o "$next_primary" = "$krel" ]; then
        echo "Creating primary EFI loader ($next_primary)"
        create_efi_app "${kernels[0]}" /boot/initrd.img-"$next_primary" "$tmpdir"/kernel-command-line.txt "$tmpdir"/linux.efi
        cp -f "$tmpdir"/linux.efi $(emboot_loader_unix_path emboot.efi)
        remove_luks_token "${cryptdev[1]}" "$next_primary"
    fi
else
    echo "No primary kernel configured"
    echo "WARNING: primary emboot EFI entry may be unbootable!"
    rm -f "$(emboot_loader_unix_path emboot.efi)"
fi

if [ -n "$next_old" ]; then
    if [ -z "$krel" -o "$next_old" != "$old" -o "$next_old" = "$krel" ]; then
        echo "Creating old EFI loader ($next_old)"
        create_efi_app "${kernels[1]}" /boot/initrd.img-"$next_old" "$tmpdir"/kernel-command-line.txt "$tmpdir"/linux.efi
        cp -f "$tmpdir"/linux.efi $(emboot_loader_unix_path emboot_old.efi)
        remove_luks_token "${cryptdev[1]}" "$next_old"
    fi
else
    rm -f "$(emboot_loader_unix_path emboot_old.efi)"
fi

rm -f "$statefile"
cat >$statefile <<EOF
primary=$(quote_args "$next_primary")
old=$(quote_args "$next_old")
EOF

exit 0
