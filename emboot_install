#! /bin/bash

cmd=$0

exec 3>&1 1>&2

[ -r /etc/efi-measured-boot/config ] && . /etc/efi-measured-boot/config
if [[ $cmd = ./* ]]; then APPDIR=.; fi
. "${APPDIR:-.}"/functions
. "${APPDIR:-.}"/bash_functions

set -e

TMPDIR=$(setup_tmp_dir)

cleanup() {
    [ -n "$TMPDIR" ] && rm -rf "$TMPDIR"
}

trap cleanup EXIT

rootdev=( $("$APPDIR"/get_device_info /) )
cryptdev=( $("$APPDIR"/get_crypttab_entry "${rootdev[1]}") )

cryptopts=${cryptdev[3]}
if [[ $cryptopts != *luks* ]]; then
    echo "crypttab entry missing luks option: $cryptopts"
    exit 1
fi
if [[ $cryptopts != *keyscript=*emboot_unseal.sh* ]]; then
    echo "keyscript option in crypttab entry missing or invalid: $cryptopts"
    exit 1
fi

echo "root=UUID=${rootdev[0]} cryptdevice=${cryptdev[1]}:${cryptdev[0]} $KERNEL_PARAMS" >"$TMPDIR"/kernel-command-line.txt

kernels=( $(list_installed_kernels) )

statefile=$(emboot_state_path)/state
rm -f "$statefile"

if [ -n "${kernels[0]}" ]; then
    kfn=$(basename "${kernels[0]}")
    krel=${kfn#vmlinuz-}
    create_efi_app "${kernels[0]}" /boot/initrd.img-"$krel" "$TMPDIR"/kernel-command-line.txt "$TMPDIR"/linux.efi
    cp -f "$TMPDIR"/linux.efi $(emboot_loader_unix_path)
    echo "primary=$(quote_args "$krel")" >"$statefile"
    echo "Primary EFI kernel is $krel" 1>&2
fi

if [ -n "${kernels[1]}" ]; then
    kfn=$(basename "${kernels[1]}")
    krel=${kfn#vmlinuz-}
    create_efi_app "${kernels[1]}" /boot/initrd.img-"$krel" "$TMPDIR"/kernel-command-line.txt "$TMPDIR"/linux.efi
    cp -f "$TMPDIR"/linux.efi $(emboot_loader_unix_path emboot_old.efi)
    echo "old=$(quote_args "$krel")" >>"$statefile"
    echo "Old EFI kernel is $krel" 1>&2
fi

exit 0
